1)

1. Sim,2. Não,3. Sim,4. Sim,5. Não,6. Sim,7. Sim,8. Sim,9. Sim,10. Não

a) - F
b) - F
c) - V
d) - F
e) - F
f) - F
g) - F
h) - V
i) - F
j) - V

2)

Combinação 1) 1->B->III
Combinação 2) 2->D->IV
Combinação 3) 3->C->I
Combinação 4) 4->E->II

3)

a) (LS)
b) (LS)
c) (LE)
d) (LS)
e) (LDE)
f) (LCDE)
g) (LDE)
h) (LE)
i) (LS)
j) (LE)

4) 

void mostrarLista (struct LE *pList){

	struct No *p;
    p = pList -> prim
    while(p != NULL)
    {
       printf("%d\t", p->info);
       p = p->prox
    }
	printf("\n");
}

5)

Sequencial

typedef struct lista
{
  char nome[20];
  char telefone[11];
} LISTA;

LISTA lista1[20];

typedef struct pilha
{
  char nome[20];
  char telefone[11];
} PILHA;

PILHA pilha1[20];

typedef struct fila
{
  char nome[20];
  char telefone[11];
} FILA;

FILA fila1[20];

Encadeada

typedef struct info
{
  char nome[20];
  char telefone[11];
} INFO;

// mesma coisa para fila,pilha,lista... a diferença está na implementação dos métodos de inserção, deleção e listagem

typedef struct No {
	INFO info;
	struct No *prox;
} NO;

typedef struct LE {
	struct No *prim;
} LISTA;

6)

A)
struct VI
{
  char placa[10];
};

void inserirFila (struct FI *pFila, struct VI veiculo){
    No *no = (No*) calloc(1, sizeof(No));
    no->veiculo = veiculo;
    no->ant = pFila->ultimo;
    if(filaVazia(pFila)){
      pFila->inicio = no;
    }else
    {
      pFila->ultimo->prox = no;
    }
    pFila->end = no;
    pFila->tam++;
}
B)
void mostraPLacaIndex(struct FI *pFila, int index)
{
   if(!filaVazia(pFila)){
      int stop = 1;
      No *no = pFila->inicio;
      while(no != NULL && stop != index){
        no = no->prox;
        stop++;
      }
      printf("A placa do %dº carro é: %s",index, no->veiculo.placa);
   }
}
C)
void removeFila (struct FI *pFila)
{
   if(!filaVazia(pFila)){
      No *aux = pFila->inicio;
      mostraPLacaIndex(pFila, 1);
      pFila->inicio = pFila->inicio->prox;
      pFila->tam--;
      free(aux);
   }
}
D)
void showTam(struct FI *pFila)
{
   if(!filaVazia(pFila)){
      printf("%d carros no fial.", pFila->tam);
   }else
   {
      printf("Fila vazia");
   }
}

7)

void imprimir(struct LC *pLC)
{
  if(!listaVazia(pFila)){
      No *no = pLC->inicio;
      do{
        printf("%d", no->valor);
        no = no->prox;
      }while(no != pLC->inicio);
  }
}

8)

public void emOrdem() {
    // ERD
    this.emOrdem(this.raiz);
}

public void preOrdem() {
    // RED
    this.preOrdem(this.raiz);
}

public void posOrdem() {
    // EDR
    this.posOrdem(this.raiz);
}

public int altura() {
    return this.altura(this.raiz);
}

private void emOrdem(NoArvore<T> ref) {
    if (ref.getNoEsquerdo() != null) {
        emOrdem(ref.getNoEsquerdo());
        System.out.println(ref.getValor().toString());
        if (ref.getNoDireito() != null) {
            emOrdem(ref.getNoDireito());
        }
    } else {
        System.out.println(ref.getValor().toString());
        if (ref.getNoDireito() != null) {
            emOrdem(ref.getNoDireito());
        }
    }
}

/*
 * 5(1) 3 7 4
 * 
 * 5,3,4,7
 */

private void preOrdem(NoArvore<T> ref) {
    System.out.println(ref.getValor().toString());
    if (ref.getNoEsquerdo() != null) {
        preOrdem(ref.getNoEsquerdo());
        if (ref.getNoDireito() != null) {
            preOrdem(ref.getNoDireito());
        }
    } else {
        if (ref.getNoDireito() != null) {
            preOrdem(ref.getNoDireito());
        }
    }
}

/*
 * h = 2 5 4 7 h = 1 1 6 8
 * 
 */

private void posOrdem(NoArvore<T> ref) {
    if (ref.getNoEsquerdo() != null) {
        posOrdem(ref.getNoEsquerdo());
        if (ref.getNoDireito() != null) {
            posOrdem(ref.getNoDireito());
        }
        System.out.println(ref.getValor().toString());
    } else {
        if (ref.getNoDireito() != null) {
            posOrdem(ref.getNoDireito());
            System.out.println(ref.getValor().toString());
        } else {
            System.out.println(ref.getValor().toString());
        }
    }
}
    
9) EUD (em ordem)

10)

11)

12)
public NoArvore<T> buscar(NoArvore<T> noBusca) {
    return this.buscar(this.raiz, noBusca);
}

private NoArvore<T> buscar(NoArvore<T> ref, NoArvore<T> noBusca) {
    if (ref.getValor().equals(noBusca.getValor())) {
        return ref;
    } else {
        if (ref.peso() < noBusca.peso()) {
            // Tem que ir para a direita
            if (ref.getNoDireito() == null) {
                throw new IllegalArgumentException("Elemento não encontrado na árvore");
            } else {
                System.out.println(" >>> Navegando à direita do nó " + ref.getValor().toString());
                return buscar(ref.getNoDireito(), noBusca);
            }
        } else {
            // Tem que ir para a esquerda
            if (ref.getNoEsquerdo() == null) {
                throw new IllegalArgumentException("Elemento não encontrado na árvore");
            } else {
                System.out.println(" >>> Navegando à esquerda do nó " + ref.getValor().toString());
                return buscar(ref.getNoEsquerdo(), noBusca);
            }
        }
    }
}
    
13) d)
